#include <iostream>
#include <memory>
#include <string>
#include <vector>
// Write template class Tab here
template <typename T> struct Tab {
  Tab *next; // pointers
  Tab *prev; // pointers
  std::string url;
  std::string name;
  T memory;
  Tab(std::string url_, std::string name_, T Memory_)
      : url{url_}, name{name_}, memory{Memory_} {}
};
// Write template class Browser here
// declare two more pointers head and tail to represent Browser as a doubly
// linked list. You can add additional pointers to implement the following
// functions.
template <typename T> class Browser {
  Tab<T> *head;
  Tab<T> *tail;
  Tab<T> *current;
public:
  Browser() : head{nullptr}, tail{nullptr}, current{nullptr} {}
  // assign values to tab values and add it at the last position of a linked
  // list
  void addNewTab(std::string url, std::string name, T tempMemory) {
    Tab<T> *newTab = new Tab<T>(url, name, tempMemory);
    newTab->next = nullptr;
    current = newTab;
    // if the list is empty
    if (head == nullptr) {
      newTab->prev = nullptr;
      head = newTab;
      tail = newTab;
    } else {
      newTab->prev = tail;
      tail->next = newTab;
      tail = newTab;
    }
  }
  // switch cursor from current tab to previous tab
  // if there is a previous a previous tab, print the details of the tab like
  // url, name and memory. If there is no previous tab it should print a message
  // that says  “No previous tab”.
  void switchToPrevTab() {
    if (current->prev == nullptr) {
      std::cout << "No previous tab" << std::endl;
    } else {
      current = current->prev;
      std::cout << current->url << "\n"
                << current->name << "\n"
                << current->memory << std::endl;
    }
  }
  void switchToNextTab() {
    if (current->next == nullptr) {
      std::cout << "No next tab" << std::endl;
    } else {
      current = current->next;
      std::cout << current->url << "\n"
                << current->name << "\n"
                << current->memory << std::endl;
    }
  }
  // deletes the current tab from the browser. When you close the current tab
  // the new current tab will be the next tab. Print the new current tab which
  // is the next tab with a message “Now the current tab  = “ and current tab
  // name
  void closeCurrentTab() {
    Tab<T> *closingTab = current;
    if (current == nullptr) {
      std::cout << "No current tab" << std::endl;
    } else {
      if (current == tail) {
        current = current->prev;
        tail = tail->prev;
        tail->next = nullptr;
      } else if (current == head) {
        head = head->next;
        head->prev = nullptr;
        current = head;
      } else {
        Tab<T> *A = current->prev;
        Tab<T> *C = current->next;
        // removing b (current)
        A->next = C;
        C->prev = A;
        current = C; // new current
      }
      std::cout << "Now the current tab  = " << current->name << std::endl;

      delete closingTab;
    }
  }
  // bookmarks the current tab and saves the pair(name,url) in the vector of
  // pairs if the current tab is still present in Browser. Use std::pair to
  // store pairs in the vector. Vector can be defined as -
  // std::vector<std::pair<data types of elements>> vector name
  std::vector<std::pair<std::string, std::string>> bookmark;
  void bookmarkCurrent() {

    if (current == nullptr) {
      std::cout << "No current tab" << std::endl;
    } else {
      for (int i = 0; i < bookmark.size(); i++) {
        if (current->name == bookmark[i].first) {
          std::cout << "The bookmark is already added!!" << std::endl;
          return;
        }
      }
      bookmark.push_back(std::make_pair(current->name, current->url));
    }
  }
  // will print all the bookmarks as follows:
  // Bookmarks:
  // name(url)

  void showBookmarkTab() {
    std::cout << "\nBookmarks:\n";
    for (int i = 0; i < bookmark.size(); i++) {
      std::cout << bookmark[i].first << "(" << bookmark[i].second << ")"
                << std::endl;
    }
  }
  // If the current tab is still present in the browser, move it to first
  // position.
  void moveCurrentToFirst() {
    if (current == nullptr) {
      std::cout << "No current tab" << std::endl;
    } else {
      if (current == tail) {
        tail = tail->prev;
        tail->next = nullptr;
        current->next = head;
        current->prev = nullptr;
        head->prev = current;
        // current on first position
        head = current;
      } else {
        Tab<T> *A = current->prev;
        Tab<T> *C = current->next;
        A->next = C;
        C->prev = A;
        // putting it at start
        head->prev = current;
        // current as head.
        current->next = head;
        current->prev = nullptr;
        head = current;
      }
    }
  }
  // calculates the total memory consumed by the browser in total. It will
  // return the memory consumption.
  double total_memory() {
    double total_memory = 0.00;
    Tab<T> *memory_current = head;
    while (memory_current != nullptr) {
      total_memory += memory_current->memory;
      memory_current = memory_current->next;
    }
    return total_memory;
  }
  // It will delete the tab which is consuming the highest memory out of all the
  // tabs. After deletion it will print the message and tab which is deleted
  // with memory consumption.
  void deleteTab() {
    Tab<T> *memory_current = head;
    Tab<T> *most_memory_tab = head;

    while (memory_current != nullptr) {
      if (memory_current->memory > most_memory_tab->memory) {
        most_memory_tab = memory_current;
      }
      memory_current = memory_current->next;
    }
    if (most_memory_tab == head) {
      head = head->next;
      head->prev = nullptr;
      if (current == most_memory_tab) {
        current = head;
      }
    } else if (most_memory_tab == tail) {
      tail = tail->prev;
      tail->next = nullptr;
      if (current == most_memory_tab) {
        current = tail;
      }
    } else {
      Tab<T> *A = most_memory_tab->prev;
      Tab<T> *C = most_memory_tab->next;
      A->next = C;
      C->prev = A;
      if (current == most_memory_tab) {
        current = C;
      }
    }
    std::cout << "Deleted element = " << most_memory_tab->name
              << " memory size = " << most_memory_tab->memory << std::endl;
    // delete most memory tab
    delete most_memory_tab;
  }
  // Add display method in Browser template class
  void display() {
    auto curr = head;
    std::cout << "\nBrowser tab list = " << std::endl;
    while (curr) {
      std::cout << "| " << curr->name << " x|-->";
      curr = curr->next;
    }
    std::cout << std::endl;
    std::cout << std::endl;
  }
};

int main() {
  Browser<double> b1;
  b1.addNewTab("https://www.google.com", "Google", 23.45);
  b1.display();
  std::cout << "Switch to previous tab = " << std::endl;
  b1.switchToPrevTab();
  std::cout << "Switch to Next tab = " << std::endl;
  b1.switchToNextTab();
  b1.addNewTab("https://www.youtube.com", "YouTube", 56);
  b1.bookmarkCurrent();
  b1.display();
  b1.addNewTab("https://www.geeksforgeeks.com", "GeeksForGeeks", 45.78);
  b1.bookmarkCurrent();
  b1.addNewTab("https://chat.openai.com", "ChatGPT", 129);
  b1.addNewTab("https://linkedin.com", "LinkedIn", 410);
  b1.bookmarkCurrent();
  b1.addNewTab("https://github.com", "Github", 110);
  b1.addNewTab("https://kaggle.com", "Kaggle", 310);
  b1.bookmarkCurrent();
  b1.display();
  std::cout << "Total memory consumption = " << b1.total_memory() << "MB"
            << std::endl;
  b1.showBookmarkTab();
  b1.moveCurrentToFirst();
  b1.display();
  b1.deleteTab();
  b1.display();
  std::cout << "Switch to next tab = " << std::endl;
  b1.switchToNextTab();
  std::cout << "Switch to previous tab = " << std::endl;
  b1.switchToPrevTab();
  b1.closeCurrentTab();
  b1.display();
  std::cout << "Switch to previous tab = " << std::endl;
  b1.switchToPrevTab();
  b1.closeCurrentTab();
  b1.display();
  b1.showBookmarkTab();
  std::cout << "Total Memory Consumption=" << b1.total_memory() << "MB"
            << std::endl;
  b1.deleteTab();
  b1.display();
  b1.addNewTab("https://docs.google.com/", "Google Docs", 102.34);
  b1.display();
  std::cout << "Switch to previous tab = " << std::endl;
  b1.switchToPrevTab();
  std::cout << "Switch to previous tab = " << std::endl;
  b1.switchToPrevTab();
  std::cout << "Switch to previous tab = " << std::endl;
  b1.switchToPrevTab();
  b1.bookmarkCurrent();
  b1.showBookmarkTab();
  b1.total_memory();
  b1.deleteTab();
  b1.display();
  return 0;
}
